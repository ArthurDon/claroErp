{"ast":null,"code":"import _defineProperty from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/components/Containers/Modal/RecoveryPassword/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport { FormSendEmail, FormSuccesslEmail, FormSendPassword, FormSuccessPassword, Loader, AlertsErrors, ModalTemplate } from '../../../Presentations';\nimport { validatorEmail, validatorPassword, validatorIdenticalPassword } from '../../../../utils';\nimport { sendForgotPassword, sendChangePassword } from '../../../../services';\n\nvar ModalRecoveryPassword = /*#__PURE__*/function (_Component) {\n  _inherits(ModalRecoveryPassword, _Component);\n\n  var _super = _createSuper(ModalRecoveryPassword);\n\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  function ModalRecoveryPassword(props) {\n    var _this;\n\n    _classCallCheck(this, ModalRecoveryPassword);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      displayModal: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: false,\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: false,\n      loader: false,\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errorMessage: '',\n      resetPassword: '',\n      flowRecoveryPassword: false\n    };\n    _this.baseState = _this.state;\n    return _this;\n  }\n  /**\n   * Component Did Mount\n   */\n\n\n  _createClass(ModalRecoveryPassword, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getHashValidator();\n      this.getProps();\n    }\n    /**\n     * Function Get Props\n     */\n\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var flowRecoveryPassword = this.props.flowRecoveryPassword;\n\n      if (flowRecoveryPassword) {\n        this.setState({\n          flowRecoveryPassword: true\n        });\n      }\n    }\n    /**\n     * Function Get Hash Validator\n     */\n\n  }, {\n    key: \"getHashValidator\",\n    value: function () {\n      var _getHashValidator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var url;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = queryString.parse(window.location.search);\n\n                if (url.resetPassword) {\n                  this.setState({\n                    displayModal: true,\n                    displayFormSendPassword: true,\n                    resetPassword: url.resetPassword\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getHashValidator() {\n        return _getHashValidator.apply(this, arguments);\n      }\n\n      return getHashValidator;\n    }()\n    /**\n     * Function On Click Button Modal\n     */\n\n  }, {\n    key: \"onClickButtonModal\",\n    value: function onClickButtonModal(event, status) {\n      event.preventDefault();\n      var flowRecoveryPassword = this.state.flowRecoveryPassword;\n\n      if (!status) {\n        this.setState({\n          displayModal: false,\n          displayFormSendEmail: false,\n          displayFormSuccessEmail: false,\n          displayFormSendPassword: false,\n          displayFormSuccessPassword: false,\n          loader: false,\n          email: '',\n          password: '',\n          confirmPassword: '',\n          errorMessage: ''\n        });\n        return;\n      }\n\n      if (flowRecoveryPassword) {\n        this.setState({\n          displayModal: true,\n          displayFormSendPassword: true\n        });\n        return;\n      }\n\n      this.setState({\n        displayModal: true,\n        displayFormSendEmail: true\n      });\n    }\n    /**\n     * Function Handle Change Form Send Email\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleChangeFormSendEmail\",\n    value: function handleChangeFormSendEmail(event) {\n      this.setState({\n        email: event.target.value,\n        errorMessage: ''\n      });\n    }\n    /**\n     * Function Handle Submit Form Send Email\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleSubmitFormSendEmail\",\n    value: function () {\n      var _handleSubmitFormSendEmail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var email, validator, sendFormEmail;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                email = this.state.email;\n                validator = validatorEmail(email);\n\n                if (validator.status) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validator.message\n                });\n                return _context2.abrupt(\"return\");\n\n              case 6:\n                this.setState({\n                  loader: true\n                });\n                _context2.next = 9;\n                return sendForgotPassword(validator.email);\n\n              case 9:\n                sendFormEmail = _context2.sent;\n\n                if (sendFormEmail.status) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendFormEmail.message,\n                  loader: false\n                });\n                return _context2.abrupt(\"return\");\n\n              case 13:\n                this.setState({\n                  loader: false,\n                  displayFormSendEmail: false,\n                  displayFormSuccessEmail: true\n                });\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleSubmitFormSendEmail(_x) {\n        return _handleSubmitFormSendEmail.apply(this, arguments);\n      }\n\n      return handleSubmitFormSendEmail;\n    }()\n    /**\n     * Function Handle Change Form Send Password\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleChangeFormSendPassword\",\n    value: function handleChangeFormSendPassword(event) {\n      var _this$setState;\n\n      this.setState((_this$setState = {}, _defineProperty(_this$setState, event.target.name, event.target.value), _defineProperty(_this$setState, \"errorMessage\", ''), _this$setState));\n    }\n    /**\n     * Function Handle Submit Form Send Password\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleSubmitFormSendPassword\",\n    value: function () {\n      var _handleSubmitFormSendPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var _this$state, password, confirmPassword, resetPassword, validatorIdenticalPass, validatePassword, sendPassConfirmPass;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n                _this$state = this.state, password = _this$state.password, confirmPassword = _this$state.confirmPassword, resetPassword = _this$state.resetPassword;\n                validatorIdenticalPass = validatorIdenticalPassword(password, confirmPassword);\n\n                if (validatorIdenticalPass.status) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatorIdenticalPass.message\n                });\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                validatePassword = validatorPassword(password);\n\n                if (validatePassword.status) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatePassword.message\n                });\n                return _context3.abrupt(\"return\");\n\n              case 10:\n                this.setState({\n                  loader: true\n                });\n                _context3.next = 13;\n                return sendChangePassword(resetPassword, validatePassword.password);\n\n              case 13:\n                sendPassConfirmPass = _context3.sent;\n\n                if (sendPassConfirmPass.status) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendPassConfirmPass.message,\n                  loader: false\n                });\n                return _context3.abrupt(\"return\");\n\n              case 17:\n                this.setState({\n                  displayFormSendPassword: false,\n                  displayFormSuccessPassword: true,\n                  loader: false\n                });\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleSubmitFormSendPassword(_x2) {\n        return _handleSubmitFormSendPassword.apply(this, arguments);\n      }\n\n      return handleSubmitFormSendPassword;\n    }()\n    /**\n     * Render Component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          flowRecoveryPassword = _this$state2.flowRecoveryPassword,\n          displayModal = _this$state2.displayModal,\n          loader = _this$state2.loader,\n          displayFormSendEmail = _this$state2.displayFormSendEmail,\n          email = _this$state2.email,\n          displayFormSuccessEmail = _this$state2.displayFormSuccessEmail,\n          displayFormSendPassword = _this$state2.displayFormSendPassword,\n          password = _this$state2.password,\n          confirmPassword = _this$state2.confirmPassword,\n          displayFormSuccessPassword = _this$state2.displayFormSuccessPassword,\n          errorMessage = _this$state2.errorMessage;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, flowRecoveryPassword ? /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/#\",\n        onClick: function onClick(event) {\n          return _this2.onClickButtonModal(event, true);\n        },\n        className: \"bt-plan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }, \"Redefinir senha\") : /*#__PURE__*/React.createElement(\"a\", {\n        onClick: function onClick(event) {\n          return _this2.onClickButtonModal(event, true);\n        },\n        href: \"/#\",\n        className: \"recover-pass\",\n        style: {\n          textDecoration: 'underline',\n          color: 'blue'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      }, \"Esqueci minha senha\"), displayModal !== false && /*#__PURE__*/React.createElement(ModalTemplate, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        display: loader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }\n      }), displayFormSendEmail !== false && /*#__PURE__*/React.createElement(FormSendEmail, {\n        email: email,\n        displayFormSendEmail: displayFormSendEmail,\n        onChange: function onChange(event) {\n          return _this2.handleChangeFormSendEmail(event);\n        },\n        onSubmit: function onSubmit(event) {\n          return _this2.handleSubmitFormSendEmail(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }\n      }), displayFormSuccessEmail !== false && /*#__PURE__*/React.createElement(FormSuccesslEmail, {\n        email: email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }\n      }), displayFormSendPassword !== false && /*#__PURE__*/React.createElement(FormSendPassword, {\n        password: password,\n        confirmPassword: confirmPassword,\n        onChange: function onChange(event) {\n          return _this2.handleChangeFormSendPassword(event);\n        },\n        onSubmit: function onSubmit(event) {\n          return _this2.handleSubmitFormSendPassword(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }\n      }), displayFormSuccessPassword !== false && /*#__PURE__*/React.createElement(FormSuccessPassword, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 54\n        }\n      }), errorMessage !== '' && /*#__PURE__*/React.createElement(AlertsErrors, {\n        message: errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/#\",\n        className: \"go-back\",\n        onClick: function onClick(event) {\n          return _this2.onClickButtonModal(event, false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      }, \"Voltar\")));\n    }\n  }]);\n\n  return ModalRecoveryPassword;\n}(Component);\n\nModalRecoveryPassword.propTypes = {\n  flowRecoveryPassword: PropTypes.bool.isRequired\n};\nexport default ModalRecoveryPassword;","map":{"version":3,"sources":["/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/components/Containers/Modal/RecoveryPassword/index.js"],"names":["React","Component","PropTypes","queryString","FormSendEmail","FormSuccesslEmail","FormSendPassword","FormSuccessPassword","Loader","AlertsErrors","ModalTemplate","validatorEmail","validatorPassword","validatorIdenticalPassword","sendForgotPassword","sendChangePassword","ModalRecoveryPassword","props","state","displayModal","displayFormSendEmail","displayFormSuccessEmail","displayFormSendPassword","displayFormSuccessPassword","loader","email","password","confirmPassword","errorMessage","resetPassword","flowRecoveryPassword","baseState","getHashValidator","getProps","setState","url","parse","window","location","search","event","status","preventDefault","target","value","validator","message","sendFormEmail","name","validatorIdenticalPass","validatePassword","sendPassConfirmPass","onClickButtonModal","textDecoration","color","handleChangeFormSendEmail","handleSubmitFormSendEmail","handleChangeFormSendPassword","handleSubmitFormSendPassword","propTypes","bool","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\n\nimport {\n  FormSendEmail,\n  FormSuccesslEmail,\n  FormSendPassword,\n  FormSuccessPassword,\n  Loader,\n  AlertsErrors,\n  ModalTemplate,\n} from '../../../Presentations';\n\nimport {\n  validatorEmail,\n  validatorPassword,\n  validatorIdenticalPassword,\n} from '../../../../utils';\n\nimport { sendForgotPassword, sendChangePassword } from '../../../../services';\n\nclass ModalRecoveryPassword extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: false,\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: false,\n      loader: false,\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errorMessage: '',\n      resetPassword: '',\n      flowRecoveryPassword: false,\n    };\n\n    this.baseState = this.state;\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    this.getHashValidator();\n    this.getProps();\n  }\n\n  /**\n   * Function Get Props\n   */\n  getProps() {\n    const { flowRecoveryPassword } = this.props;\n    if (flowRecoveryPassword) {\n      this.setState({\n        flowRecoveryPassword: true,\n      });\n    }\n  }\n\n  /**\n   * Function Get Hash Validator\n   */\n  async getHashValidator() {\n    const url = queryString.parse(window.location.search);\n    if (url.resetPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true,\n        resetPassword: url.resetPassword,\n      });\n    }\n  }\n\n  /**\n   * Function On Click Button Modal\n   */\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n\n    const { flowRecoveryPassword } = this.state;\n\n    if (!status) {\n      this.setState({\n        displayModal: false,\n        displayFormSendEmail: false,\n        displayFormSuccessEmail: false,\n        displayFormSendPassword: false,\n        displayFormSuccessPassword: false,\n        loader: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        errorMessage: '',\n      });\n      return;\n    }\n\n    if (flowRecoveryPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true,\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSendEmail: true,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Send Email\n   * @param {obj} event\n   */\n  handleChangeFormSendEmail(event) {\n    this.setState({ email: event.target.value, errorMessage: '' });\n  }\n\n  /**\n   * Function Handle Submit Form Send Email\n   * @param {obj} event\n   */\n  async handleSubmitFormSendEmail(event) {\n    event.preventDefault();\n\n    const { email } = this.state;\n\n    const validator = validatorEmail(email);\n\n    if (!validator.status) {\n      this.setState({ errorMessage: validator.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormEmail = await sendForgotPassword(validator.email);\n\n    if (!sendFormEmail.status) {\n      this.setState({ errorMessage: sendFormEmail.message, loader: false });\n      return;\n    }\n\n    this.setState({\n      loader: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: true,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Send Password\n   * @param {obj} event\n   */\n  handleChangeFormSendPassword(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: '',\n    });\n  }\n\n  /**\n   * Function Handle Submit Form Send Password\n   * @param {obj} event\n   */\n  async handleSubmitFormSendPassword(event) {\n    event.preventDefault();\n\n    const { password, confirmPassword, resetPassword } = this.state;\n\n    const validatorIdenticalPass = validatorIdenticalPassword(\n      password,\n      confirmPassword\n    );\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({ errorMessage: validatorIdenticalPass.message });\n      return;\n    }\n\n    const validatePassword = validatorPassword(password);\n\n    if (!validatePassword.status) {\n      this.setState({ errorMessage: validatePassword.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendPassConfirmPass = await sendChangePassword(\n      resetPassword,\n      validatePassword.password\n    );\n\n    if (!sendPassConfirmPass.status) {\n      this.setState({\n        errorMessage: sendPassConfirmPass.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: true,\n      loader: false,\n    });\n  }\n\n  /**\n   * Render Component\n   */\n  render() {\n    const {\n      flowRecoveryPassword,\n      displayModal,\n      loader,\n      displayFormSendEmail,\n      email,\n      displayFormSuccessEmail,\n      displayFormSendPassword,\n      password,\n      confirmPassword,\n      displayFormSuccessPassword,\n      errorMessage,\n    } = this.state;\n    return (\n      <>\n        {flowRecoveryPassword ? (\n          <a\n            href=\"/#\"\n            onClick={(event) => this.onClickButtonModal(event, true)}\n            className=\"bt-plan\"\n          >\n            Redefinir senha\n          </a>\n        ) : (\n          <a\n            onClick={(event) => this.onClickButtonModal(event, true)}\n            href=\"/#\"\n            className=\"recover-pass\"\n            style={{ textDecoration: 'underline', color: 'blue' }}\n          >\n            Esqueci minha senha\n          </a>\n        )}\n\n        {displayModal !== false && (\n          <ModalTemplate>\n            <Loader display={loader} />\n\n            {displayFormSendEmail !== false && (\n              <FormSendEmail\n                email={email}\n                displayFormSendEmail={displayFormSendEmail}\n                onChange={(event) => this.handleChangeFormSendEmail(event)}\n                onSubmit={(event) => this.handleSubmitFormSendEmail(event)}\n              />\n            )}\n\n            {displayFormSuccessEmail !== false && (\n              <FormSuccesslEmail email={email} />\n            )}\n\n            {displayFormSendPassword !== false && (\n              <FormSendPassword\n                password={password}\n                confirmPassword={confirmPassword}\n                onChange={(event) => this.handleChangeFormSendPassword(event)}\n                onSubmit={(event) => this.handleSubmitFormSendPassword(event)}\n              />\n            )}\n\n            {displayFormSuccessPassword !== false && <FormSuccessPassword />}\n\n            {errorMessage !== '' && <AlertsErrors message={errorMessage} />}\n\n            <a\n              href=\"/#\"\n              className=\"go-back\"\n              onClick={(event) => this.onClickButtonModal(event, false)}\n            >\n              Voltar\n            </a>\n          </ModalTemplate>\n        )}\n      </>\n    );\n  }\n}\n\nModalRecoveryPassword.propTypes = {\n  flowRecoveryPassword: PropTypes.bool.isRequired,\n};\n\nexport default ModalRecoveryPassword;\n"]},"metadata":{},"sourceType":"module"}