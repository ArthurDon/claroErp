{"ast":null,"code":"import IP from 'ip';\nimport Bowser from 'bowser';\nimport JWT from 'jsonwebtoken';\nimport { SECRET_KEY } from '../../constants';\nimport { enCrypto, deCrypto } from '..';\n/**\n * Function Authorize Token\n */\n\nexport var isAuthorizated = function isAuthorizated() {\n  var ip = IP.address();\n  var token = localStorage.getItem('token');\n  var browserParse = Bowser.getParser(window.navigator.userAgent);\n  var browser = browserParse.getBrowserName();\n  return JWT.verify(token, SECRET_KEY, function (err, decoded) {\n    if (err) {\n      localStorage.removeItem('token');\n      return false;\n    }\n\n    var response = deCrypto(decoded.data);\n\n    if (!(browser === response.browser) && ip === response.ip) {\n      localStorage.removeItem('token');\n      return false;\n    }\n\n    return true;\n  });\n};\n/**\n * Function Create Token\n * @param {obj} idToken\n * @param {string} email\n */\n\nexport function createToken(idToken, email) {\n  var ip = IP.address();\n  var browserParse = Bowser.getParser(window.navigator.userAgent);\n  var browser = browserParse.getBrowserName();\n  return JWT.sign({\n    data: enCrypto({\n      token: idToken,\n      email: email,\n      browser: browser,\n      ip: ip\n    })\n  }, SECRET_KEY, {\n    expiresIn: '1h'\n  }, function (err, token) {\n    if (err) {\n      return false;\n    }\n\n    localStorage.setItem('token', token);\n    return true;\n  });\n}\n/**\n * Function Validate Token\n * @param {string} type\n */\n\nexport function validateToken(type) {\n  var token = localStorage.getItem('token');\n  return JWT.verify(token, SECRET_KEY, function (err, decoded) {\n    if (err) {\n      return false;\n    }\n\n    var response = deCrypto(decoded.data);\n\n    switch (type) {\n      case 'token':\n        return response.token;\n\n      case 'email':\n        return response.email;\n\n      case 'phone':\n        return response.phone;\n\n      case 'idToken':\n        return response.idToken;\n\n      case 'refresh_token':\n        return response.refresh_token;\n\n      default:\n        return response.token;\n    }\n  });\n}\n/**\n * Function Remove Token\n */\n\nexport function removeToken() {\n  var token = localStorage.getItem('token');\n  return JWT.verify(token, SECRET_KEY, function (err) {\n    if (err) {\n      return false;\n    }\n\n    localStorage.removeItem('token');\n    window.location = '/';\n    return true;\n  });\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/utils/Token/index.js"],"names":["IP","Bowser","JWT","SECRET_KEY","enCrypto","deCrypto","isAuthorizated","ip","address","token","localStorage","getItem","browserParse","getParser","window","navigator","userAgent","browser","getBrowserName","verify","err","decoded","removeItem","response","data","createToken","idToken","email","sign","expiresIn","setItem","validateToken","type","phone","refresh_token","removeToken","location"],"mappings":"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","sourcesContent":["import IP from 'ip';\nimport Bowser from 'bowser';\nimport JWT from 'jsonwebtoken';\n\nimport { SECRET_KEY } from '../../constants';\n\nimport { enCrypto, deCrypto } from '..';\n\n/**\n * Function Authorize Token\n */\nexport const isAuthorizated = () => {\n  const ip = IP.address();\n  const token = localStorage.getItem('token');\n  const browserParse = Bowser.getParser(window.navigator.userAgent);\n  const browser = browserParse.getBrowserName();\n\n  return JWT.verify(token, SECRET_KEY, (err, decoded) => {\n    if (err) {\n      localStorage.removeItem('token');\n      return false;\n    }\n\n    const response = deCrypto(decoded.data);\n\n    if (!(browser === response.browser) && ip === response.ip) {\n      localStorage.removeItem('token');\n      return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Function Create Token\n * @param {obj} idToken\n * @param {string} email\n */\nexport function createToken(idToken, email) {\n  const ip = IP.address();\n  const browserParse = Bowser.getParser(window.navigator.userAgent);\n  const browser = browserParse.getBrowserName();\n\n  return JWT.sign(\n    {\n      data: enCrypto({\n        token: idToken,\n        email,\n        browser,\n        ip,\n      }),\n    },\n    SECRET_KEY,\n    { expiresIn: '1h' },\n    (err, token) => {\n      if (err) {\n        return false;\n      }\n      localStorage.setItem('token', token);\n      return true;\n    }\n  );\n}\n\n/**\n * Function Validate Token\n * @param {string} type\n */\nexport function validateToken(type) {\n  const token = localStorage.getItem('token');\n\n  return JWT.verify(token, SECRET_KEY, (err, decoded) => {\n    if (err) {\n      return false;\n    }\n\n    const response = deCrypto(decoded.data);\n\n    switch (type) {\n      case 'token':\n        return response.token;\n      case 'email':\n        return response.email;\n      case 'phone':\n        return response.phone;\n      case 'idToken':\n        return response.idToken;\n      case 'refresh_token':\n        return response.refresh_token;\n      default:\n        return response.token;\n    }\n  });\n}\n\n/**\n * Function Remove Token\n */\nexport function removeToken() {\n  const token = localStorage.getItem('token');\n\n  return JWT.verify(token, SECRET_KEY, (err) => {\n    if (err) {\n      return false;\n    }\n    localStorage.removeItem('token');\n    window.location = '/';\n    return true;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}