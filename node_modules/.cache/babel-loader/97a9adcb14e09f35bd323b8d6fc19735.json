{"ast":null,"code":"import _defineProperty from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/components/Containers/Modal/RegisterData/index.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport { FormSendPhone, FormRegisterData, FormSuccessData, FormValidatePincode, Loader, AlertsErrors, ModalTemplate } from '../../../Presentations';\nimport { validatorPhoneNumber, validatorPincode, validatorEmail, validatorPassword, validatorCNPJ, validatorIdenticalPassword } from '../../../../utils';\nimport { sendPincode, validatePincode, authorization, verifyCustomToken, sendMergeAccount, getMergeAccount as _getMergeAccount } from '../../../../services';\n\nvar ModalRegisterData = /*#__PURE__*/function (_Component) {\n  _inherits(ModalRegisterData, _Component);\n\n  var _super = _createSuper(ModalRegisterData);\n\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  function ModalRegisterData(props) {\n    var _this;\n\n    _classCallCheck(this, ModalRegisterData);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      displayModal: false,\n      displayFormSendPhone: false,\n      displayFormValidatePincode: false,\n      displayFormSuccessData: false,\n      displayFormRegisterData: false,\n      displaySuccessMergeAccount: false,\n      loader: false,\n      btnResendPincode: false,\n      messageResendPincode: true,\n      countResendPincode: 60,\n      phone: '',\n      email: '',\n      password: '',\n      cnpj: '',\n      confirmPassword: '',\n      errorMessage: '',\n      pinCode: '',\n      idToken: '',\n      transactionId: ''\n    };\n    _this.baseState = _this.state;\n    return _this;\n  }\n  /**\n   * Component Did Mount\n   */\n\n\n  _createClass(ModalRegisterData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = queryString.parse(window.location.search);\n\n      if (params.confirmToken) {\n        this.getMergeAccount(params.confirmToken);\n      }\n    }\n    /**\n     * Function Get Merge Account\n     * @param {json} token\n     */\n\n  }, {\n    key: \"getMergeAccount\",\n    value: function () {\n      var _getMergeAccount2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n        var getMergeAccountResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _getMergeAccount(token);\n\n              case 2:\n                getMergeAccountResponse = _context.sent;\n\n                if (getMergeAccountResponse.status) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  displayModal: true,\n                  errorMessage: getMergeAccountResponse.message,\n                  loader: false\n                });\n                return _context.abrupt(\"return\");\n\n              case 6:\n                this.setState({\n                  displayModal: true,\n                  displayFormSuccessData: true,\n                  displaySuccessMergeAccount: true\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getMergeAccount(_x) {\n        return _getMergeAccount2.apply(this, arguments);\n      }\n\n      return getMergeAccount;\n    }()\n    /**\n     * Function On Click Button Modal\n     * @param {obj} event\n     * @param {bool} status\n     */\n\n  }, {\n    key: \"onClickButtonModal\",\n    value: function onClickButtonModal(event, status) {\n      event.preventDefault();\n\n      if (!status) {\n        this.setState(this.baseState);\n        return;\n      }\n\n      this.setState({\n        displayModal: true,\n        displayFormSendPhone: true\n      });\n    }\n    /**\n     * Function On Click Button Change Number\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"onClickButtonChangeNumber\",\n    value: function onClickButtonChangeNumber(event) {\n      event.preventDefault();\n      this.setState({\n        displayFormSendPhone: true,\n        displayFormValidatePincode: false\n      });\n    }\n    /**\n     * Function Handle Change Form Send Phone\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleChangeFormSendPhone\",\n    value: function handleChangeFormSendPhone(event) {\n      this.setState({\n        phone: event.target.value,\n        errorMessage: ''\n      });\n    }\n    /**\n     * Function Handle Submit Form Send Phone\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleSubmitFormSendPhone\",\n    value: function () {\n      var _handleSubmitFormSendPhone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var phone, validator, sendFormPhone;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                phone = this.state.phone;\n                validator = validatorPhoneNumber(phone);\n\n                if (validator.status) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validator.message\n                });\n                return _context2.abrupt(\"return\");\n\n              case 6:\n                this.setState({\n                  loader: true\n                });\n                _context2.next = 9;\n                return sendPincode(validator.phone);\n\n              case 9:\n                sendFormPhone = _context2.sent;\n\n                if (sendFormPhone.status) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendFormPhone.message,\n                  loader: false\n                });\n                return _context2.abrupt(\"return\");\n\n              case 13:\n                this.showCountSendPincode();\n                this.setState({\n                  loader: false,\n                  displayFormSendPhone: false,\n                  displayFormValidatePincode: true,\n                  transactionId: sendFormPhone.transactionId,\n                  phone: validator.phone\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleSubmitFormSendPhone(_x2) {\n        return _handleSubmitFormSendPhone.apply(this, arguments);\n      }\n\n      return handleSubmitFormSendPhone;\n    }()\n    /**\n     * Function Handle Change Form Validate Pincode\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleChangeFormValidatePincode\",\n    value: function handleChangeFormValidatePincode(event) {\n      var _this$setState;\n\n      this.setState((_this$setState = {}, _defineProperty(_this$setState, event.target.name, event.target.value), _defineProperty(_this$setState, \"errorMessage\", ''), _this$setState));\n    }\n    /**\n     * Function Handle Submit Form Validate Pincode\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleSubmitFormValidatePincode\",\n    value: function () {\n      var _handleSubmitFormValidatePincode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var _this$state, pinCode, transactionId, validator, sendFormCode, sendAuthorize, sendVerifyCustomToken;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n                _this$state = this.state, pinCode = _this$state.pinCode, transactionId = _this$state.transactionId;\n                validator = validatorPincode(pinCode);\n\n                if (validator.status) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validator.message\n                });\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                this.setState({\n                  loader: true\n                });\n                _context3.next = 9;\n                return validatePincode(validator.pincode, transactionId);\n\n              case 9:\n                sendFormCode = _context3.sent;\n\n                if (sendFormCode.status) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendFormCode.message,\n                  loader: false\n                });\n                return _context3.abrupt(\"return\");\n\n              case 13:\n                _context3.next = 15;\n                return authorization(sendFormCode.fsAuthToken);\n\n              case 15:\n                sendAuthorize = _context3.sent;\n\n                if (sendAuthorize.status) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendAuthorize.message,\n                  loader: false\n                });\n                return _context3.abrupt(\"return\");\n\n              case 19:\n                _context3.next = 21;\n                return verifyCustomToken(sendAuthorize.customToken);\n\n              case 21:\n                sendVerifyCustomToken = _context3.sent;\n\n                if (sendVerifyCustomToken.status) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendAuthorize.message,\n                  loader: false\n                });\n                return _context3.abrupt(\"return\");\n\n              case 25:\n                this.setState({\n                  displayFormValidatePincode: false,\n                  displayFormRegisterData: true,\n                  loader: false,\n                  idToken: sendVerifyCustomToken.idToken\n                });\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleSubmitFormValidatePincode(_x3) {\n        return _handleSubmitFormValidatePincode.apply(this, arguments);\n      }\n\n      return handleSubmitFormValidatePincode;\n    }()\n    /**\n     * Function Handle Change Form Register Data\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleChangeFormRegisterData\",\n    value: function handleChangeFormRegisterData(event) {\n      var _this$setState2;\n\n      this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, event.target.name, event.target.value), _defineProperty(_this$setState2, \"errorMessage\", ''), _this$setState2));\n    }\n    /**\n     * Functiom Handle Submit Form Register Data\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"handleSubmitFormRegisterData\",\n    value: function () {\n      var _handleSubmitFormRegisterData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {\n        var _this$state2, email, phone, cnpj, password, confirmPassword, idToken, validatorCnpj, validatorMail, validatorIdenticalPass, validatorPass, sendFormRegisterData;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault();\n                _this$state2 = this.state, email = _this$state2.email, phone = _this$state2.phone, cnpj = _this$state2.cnpj, password = _this$state2.password, confirmPassword = _this$state2.confirmPassword, idToken = _this$state2.idToken;\n                validatorCnpj = validatorCNPJ(cnpj);\n\n                if (validatorCnpj.status) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatorCnpj.message\n                });\n                return _context4.abrupt(\"return\");\n\n              case 6:\n                validatorMail = validatorEmail(email);\n\n                if (validatorMail.status) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatorMail.message\n                });\n                return _context4.abrupt(\"return\");\n\n              case 10:\n                validatorIdenticalPass = validatorIdenticalPassword(password, confirmPassword);\n\n                if (validatorIdenticalPass.status) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatorIdenticalPass.message\n                });\n                return _context4.abrupt(\"return\");\n\n              case 14:\n                validatorPass = validatorPassword(password);\n\n                if (validatorPass.status) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: validatorPass.message\n                });\n                return _context4.abrupt(\"return\");\n\n              case 18:\n                this.setState({\n                  loader: true\n                });\n                _context4.next = 21;\n                return sendMergeAccount(idToken, validatorIdenticalPass.password, validatorCnpj.cnpj, validatorMail.email, phone);\n\n              case 21:\n                sendFormRegisterData = _context4.sent;\n\n                if (sendFormRegisterData.status) {\n                  _context4.next = 25;\n                  break;\n                }\n\n                this.setState({\n                  errorMessage: sendFormRegisterData.message,\n                  loader: false\n                });\n                return _context4.abrupt(\"return\");\n\n              case 25:\n                this.setState({\n                  displayFormRegisterData: false,\n                  displayFormSuccessData: true,\n                  loader: false\n                });\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleSubmitFormRegisterData(_x4) {\n        return _handleSubmitFormRegisterData.apply(this, arguments);\n      }\n\n      return handleSubmitFormRegisterData;\n    }()\n    /**\n     * Function On Click Button Resend Email\n     * @param {obj} event\n     */\n\n  }, {\n    key: \"onClickButtonResendEmail\",\n    value: function onClickButtonResendEmail(event) {\n      event.preventDefault();\n      this.setState({\n        displayFormRegisterData: true,\n        displayFormSuccessData: false\n      });\n    }\n    /**\n     * Function Show Count Send Pincode\n     */\n\n  }, {\n    key: \"showCountSendPincode\",\n    value: function showCountSendPincode() {\n      var _this2 = this;\n\n      var intervalId = setInterval(function () {\n        // eslint-disable-next-line react/destructuring-assignment\n        var count = _this2.state.countResendPincode - 1;\n\n        if (count >= 1) {\n          _this2.setState({\n            countResendPincode: count,\n            messageResendPincode: true,\n            btnResendPincode: false\n          });\n        } else {\n          clearInterval(intervalId);\n\n          _this2.setState({\n            countResendPincode: 60,\n            messageResendPincode: false,\n            btnResendPincode: true\n          });\n        }\n      }, 1000);\n    }\n    /**\n     * Handle Resend Pincode\n     * @param {event} event\n     */\n\n  }, {\n    key: \"handleResendPincode\",\n    value: function () {\n      var _handleResendPincode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var phone, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                phone = this.state.phone;\n                _context5.next = 3;\n                return sendPincode(phone);\n\n              case 3:\n                response = _context5.sent;\n\n                if (response.status) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                this.setState({\n                  messageResendPincode: false,\n                  btnResendPincode: true,\n                  errorMessage: response.message\n                });\n                return _context5.abrupt(\"return\");\n\n              case 7:\n                this.showCountSendPincode();\n                this.setState({\n                  transactionId: response.transaction_id\n                });\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleResendPincode() {\n        return _handleResendPincode.apply(this, arguments);\n      }\n\n      return handleResendPincode;\n    }()\n    /**\n     * Render Component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          displayModal = _this$state3.displayModal,\n          loader = _this$state3.loader,\n          displayFormSendPhone = _this$state3.displayFormSendPhone,\n          phone = _this$state3.phone,\n          email = _this$state3.email,\n          displayFormValidatePincode = _this$state3.displayFormValidatePincode,\n          countResendPincode = _this$state3.countResendPincode,\n          pinCode = _this$state3.pinCode,\n          displayFormRegisterData = _this$state3.displayFormRegisterData,\n          password = _this$state3.password,\n          cnpj = _this$state3.cnpj,\n          btnResendPincode = _this$state3.btnResendPincode,\n          messageResendPincode = _this$state3.messageResendPincode,\n          confirmPassword = _this$state3.confirmPassword,\n          displayFormSuccessData = _this$state3.displayFormSuccessData,\n          displaySuccessMergeAccount = _this$state3.displaySuccessMergeAccount,\n          errorMessage = _this$state3.errorMessage;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: function onClick(event) {\n          return _this3.onClickButtonModal(event, true);\n        },\n        href: \"/#\",\n        className: \"bt-register\",\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 9\n        }\n      }, \"Criar Cadastro\"), displayModal !== false && /*#__PURE__*/React.createElement(ModalTemplate, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        display: loader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }\n      }), displayFormSendPhone !== false && /*#__PURE__*/React.createElement(FormSendPhone, {\n        displayFormSendPhone: displayFormSendPhone,\n        phone: phone,\n        onChange: function onChange(event) {\n          return _this3.handleChangeFormSendPhone(event);\n        },\n        onSubmit: function onSubmit(event) {\n          return _this3.handleSubmitFormSendPhone(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 15\n        }\n      }), displayFormValidatePincode !== false && /*#__PURE__*/React.createElement(FormValidatePincode, {\n        phone: phone,\n        countResendPincode: countResendPincode,\n        messageResendPincode: messageResendPincode,\n        onClickResendPincode: function onClickResendPincode(event) {\n          return _this3.handleResendPincode(event);\n        },\n        pinCode: pinCode,\n        btnResendPincode: btnResendPincode,\n        onClickButtonChangeNumber: function onClickButtonChangeNumber(event) {\n          return _this3.onClickButtonChangeNumber(event);\n        },\n        onChange: function onChange(event) {\n          return _this3.handleChangeFormValidatePincode(event);\n        },\n        onSubmit: function onSubmit(event) {\n          return _this3.handleSubmitFormValidatePincode(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 15\n        }\n      }), displayFormRegisterData !== false && /*#__PURE__*/React.createElement(FormRegisterData, {\n        email: email,\n        password: password,\n        cnpj: cnpj,\n        confirmPassword: confirmPassword,\n        onChange: function onChange(event) {\n          return _this3.handleChangeFormRegisterData(event);\n        },\n        onSubmit: function onSubmit(event) {\n          return _this3.handleSubmitFormRegisterData(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }\n      }), displayFormSuccessData !== false && /*#__PURE__*/React.createElement(FormSuccessData, {\n        displaySuccessMergeAccount: displaySuccessMergeAccount,\n        onClick: function onClick(event) {\n          return _this3.onClickButtonResendEmail(event);\n        },\n        email: email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 15\n        }\n      }), errorMessage !== '' && /*#__PURE__*/React.createElement(AlertsErrors, {\n        message: errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/#\",\n        className: \"go-back\",\n        onClick: function onClick(event) {\n          return _this3.onClickButtonModal(event, false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }\n      }, \"Voltar\")));\n    }\n  }]);\n\n  return ModalRegisterData;\n}(Component);\n\nexport { ModalRegisterData as default };","map":{"version":3,"sources":["/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/components/Containers/Modal/RegisterData/index.js"],"names":["React","Component","queryString","FormSendPhone","FormRegisterData","FormSuccessData","FormValidatePincode","Loader","AlertsErrors","ModalTemplate","validatorPhoneNumber","validatorPincode","validatorEmail","validatorPassword","validatorCNPJ","validatorIdenticalPassword","sendPincode","validatePincode","authorization","verifyCustomToken","sendMergeAccount","getMergeAccount","ModalRegisterData","props","state","displayModal","displayFormSendPhone","displayFormValidatePincode","displayFormSuccessData","displayFormRegisterData","displaySuccessMergeAccount","loader","btnResendPincode","messageResendPincode","countResendPincode","phone","email","password","cnpj","confirmPassword","errorMessage","pinCode","idToken","transactionId","baseState","params","parse","window","location","search","confirmToken","token","getMergeAccountResponse","status","setState","message","event","preventDefault","target","value","validator","sendFormPhone","showCountSendPincode","name","pincode","sendFormCode","fsAuthToken","sendAuthorize","customToken","sendVerifyCustomToken","validatorCnpj","validatorMail","validatorIdenticalPass","validatorPass","sendFormRegisterData","intervalId","setInterval","count","clearInterval","response","transaction_id","onClickButtonModal","color","handleChangeFormSendPhone","handleSubmitFormSendPhone","handleResendPincode","onClickButtonChangeNumber","handleChangeFormValidatePincode","handleSubmitFormValidatePincode","handleChangeFormRegisterData","handleSubmitFormRegisterData","onClickButtonResendEmail"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\n\nimport {\n  FormSendPhone,\n  FormRegisterData,\n  FormSuccessData,\n  FormValidatePincode,\n  Loader,\n  AlertsErrors,\n  ModalTemplate,\n} from '../../../Presentations';\n\nimport {\n  validatorPhoneNumber,\n  validatorPincode,\n  validatorEmail,\n  validatorPassword,\n  validatorCNPJ,\n  validatorIdenticalPassword,\n} from '../../../../utils';\n\nimport {\n  sendPincode,\n  validatePincode,\n  authorization,\n  verifyCustomToken,\n  sendMergeAccount,\n  getMergeAccount,\n} from '../../../../services';\n\nexport default class ModalRegisterData extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendPhone: false,\n      displayFormValidatePincode: false,\n      displayFormSuccessData: false,\n      displayFormRegisterData: false,\n      displaySuccessMergeAccount: false,\n      loader: false,\n      btnResendPincode: false,\n      messageResendPincode: true,\n      countResendPincode: 60,\n      phone: '',\n      email: '',\n      password: '',\n      cnpj: '',\n      confirmPassword: '',\n      errorMessage: '',\n      pinCode: '',\n      idToken: '',\n      transactionId: '',\n    };\n\n    this.baseState = this.state;\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    if (params.confirmToken) {\n      this.getMergeAccount(params.confirmToken);\n    }\n  }\n\n  /**\n   * Function Get Merge Account\n   * @param {json} token\n   */\n  async getMergeAccount(token) {\n    const getMergeAccountResponse = await getMergeAccount(token);\n\n    if (!getMergeAccountResponse.status) {\n      this.setState({\n        displayModal: true,\n        errorMessage: getMergeAccountResponse.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSuccessData: true,\n      displaySuccessMergeAccount: true,\n    });\n  }\n\n  /**\n   * Function On Click Button Modal\n   * @param {obj} event\n   * @param {bool} status\n   */\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n\n    if (!status) {\n      this.setState(this.baseState);\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSendPhone: true,\n    });\n  }\n\n  /**\n   * Function On Click Button Change Number\n   * @param {obj} event\n   */\n  onClickButtonChangeNumber(event) {\n    event.preventDefault();\n\n    this.setState({\n      displayFormSendPhone: true,\n      displayFormValidatePincode: false,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Send Phone\n   * @param {obj} event\n   */\n  handleChangeFormSendPhone(event) {\n    this.setState({ phone: event.target.value, errorMessage: '' });\n  }\n\n  /**\n   * Function Handle Submit Form Send Phone\n   * @param {obj} event\n   */\n  async handleSubmitFormSendPhone(event) {\n    event.preventDefault();\n\n    const { phone } = this.state;\n\n    const validator = validatorPhoneNumber(phone);\n\n    if (!validator.status) {\n      this.setState({ errorMessage: validator.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormPhone = await sendPincode(validator.phone);\n\n    if (!sendFormPhone.status) {\n      this.setState({ errorMessage: sendFormPhone.message, loader: false });\n      return;\n    }\n\n    this.showCountSendPincode();\n\n    this.setState({\n      loader: false,\n      displayFormSendPhone: false,\n      displayFormValidatePincode: true,\n      transactionId: sendFormPhone.transactionId,\n      phone: validator.phone,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Validate Pincode\n   * @param {obj} event\n   */\n  handleChangeFormValidatePincode(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: '',\n    });\n  }\n\n  /**\n   * Function Handle Submit Form Validate Pincode\n   * @param {obj} event\n   */\n  async handleSubmitFormValidatePincode(event) {\n    event.preventDefault();\n\n    const { pinCode, transactionId } = this.state;\n\n    const validator = validatorPincode(pinCode);\n\n    if (!validator.status) {\n      this.setState({ errorMessage: validator.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormCode = await validatePincode(\n      validator.pincode,\n      transactionId\n    );\n\n    if (!sendFormCode.status) {\n      this.setState({ errorMessage: sendFormCode.message, loader: false });\n      return;\n    }\n\n    const sendAuthorize = await authorization(sendFormCode.fsAuthToken);\n\n    if (!sendAuthorize.status) {\n      this.setState({ errorMessage: sendAuthorize.message, loader: false });\n      return;\n    }\n\n    const sendVerifyCustomToken = await verifyCustomToken(\n      sendAuthorize.customToken\n    );\n\n    if (!sendVerifyCustomToken.status) {\n      this.setState({ errorMessage: sendAuthorize.message, loader: false });\n      return;\n    }\n\n    this.setState({\n      displayFormValidatePincode: false,\n      displayFormRegisterData: true,\n      loader: false,\n      idToken: sendVerifyCustomToken.idToken,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Register Data\n   * @param {obj} event\n   */\n  handleChangeFormRegisterData(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: '',\n    });\n  }\n\n  /**\n   * Functiom Handle Submit Form Register Data\n   * @param {obj} event\n   */\n  async handleSubmitFormRegisterData(event) {\n    event.preventDefault();\n\n    const {\n      email,\n      phone,\n      cnpj,\n      password,\n      confirmPassword,\n      idToken,\n    } = this.state;\n\n    const validatorCnpj = validatorCNPJ(cnpj);\n\n    if (!validatorCnpj.status) {\n      this.setState({ errorMessage: validatorCnpj.message });\n      return;\n    }\n\n    const validatorMail = validatorEmail(email);\n\n    if (!validatorMail.status) {\n      this.setState({ errorMessage: validatorMail.message });\n      return;\n    }\n\n    const validatorIdenticalPass = validatorIdenticalPassword(\n      password,\n      confirmPassword\n    );\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({ errorMessage: validatorIdenticalPass.message });\n      return;\n    }\n\n    const validatorPass = validatorPassword(password);\n\n    if (!validatorPass.status) {\n      this.setState({ errorMessage: validatorPass.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormRegisterData = await sendMergeAccount(\n      idToken,\n      validatorIdenticalPass.password,\n      validatorCnpj.cnpj,\n      validatorMail.email,\n      phone\n    );\n\n    if (!sendFormRegisterData.status) {\n      this.setState({\n        errorMessage: sendFormRegisterData.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormRegisterData: false,\n      displayFormSuccessData: true,\n      loader: false,\n    });\n  }\n\n  /**\n   * Function On Click Button Resend Email\n   * @param {obj} event\n   */\n  onClickButtonResendEmail(event) {\n    event.preventDefault();\n\n    this.setState({\n      displayFormRegisterData: true,\n      displayFormSuccessData: false,\n    });\n  }\n\n  /**\n   * Function Show Count Send Pincode\n   */\n  showCountSendPincode() {\n    const intervalId = setInterval(() => {\n      // eslint-disable-next-line react/destructuring-assignment\n      const count = this.state.countResendPincode - 1;\n      if (count >= 1) {\n        this.setState({\n          countResendPincode: count,\n          messageResendPincode: true,\n          btnResendPincode: false,\n        });\n      } else {\n        clearInterval(intervalId);\n        this.setState({\n          countResendPincode: 60,\n          messageResendPincode: false,\n          btnResendPincode: true,\n        });\n      }\n    }, 1000);\n  }\n\n  /**\n   * Handle Resend Pincode\n   * @param {event} event\n   */\n  async handleResendPincode() {\n    const { phone } = this.state;\n\n    const response = await sendPincode(phone);\n\n    if (!response.status) {\n      this.setState({\n        messageResendPincode: false,\n        btnResendPincode: true,\n        errorMessage: response.message,\n      });\n      return;\n    }\n    this.showCountSendPincode();\n\n    this.setState({\n      transactionId: response.transaction_id,\n    });\n  }\n\n  /**\n   * Render Component\n   */\n  render() {\n    const {\n      displayModal,\n      loader,\n      displayFormSendPhone,\n      phone,\n      email,\n      displayFormValidatePincode,\n      countResendPincode,\n      pinCode,\n      displayFormRegisterData,\n      password,\n      cnpj,\n      btnResendPincode,\n      messageResendPincode,\n      confirmPassword,\n      displayFormSuccessData,\n      displaySuccessMergeAccount,\n      errorMessage,\n    } = this.state;\n    return (\n      <>\n        <a\n          onClick={(event) => this.onClickButtonModal(event, true)}\n          href=\"/#\"\n          className=\"bt-register\"\n          style={{ color: 'red' }}\n        >\n          Criar Cadastro\n        </a>\n        {displayModal !== false && (\n          <ModalTemplate>\n            <Loader display={loader} />\n\n            {displayFormSendPhone !== false && (\n              <FormSendPhone\n                displayFormSendPhone={displayFormSendPhone}\n                phone={phone}\n                onChange={(event) => this.handleChangeFormSendPhone(event)}\n                onSubmit={(event) => this.handleSubmitFormSendPhone(event)}\n              />\n            )}\n\n            {displayFormValidatePincode !== false && (\n              <FormValidatePincode\n                phone={phone}\n                countResendPincode={countResendPincode}\n                messageResendPincode={messageResendPincode}\n                onClickResendPincode={(event) =>\n                  this.handleResendPincode(event)\n                }\n                pinCode={pinCode}\n                btnResendPincode={btnResendPincode}\n                onClickButtonChangeNumber={(event) =>\n                  this.onClickButtonChangeNumber(event)\n                }\n                onChange={(event) =>\n                  this.handleChangeFormValidatePincode(event)\n                }\n                onSubmit={(event) =>\n                  this.handleSubmitFormValidatePincode(event)\n                }\n              />\n            )}\n\n            {displayFormRegisterData !== false && (\n              <FormRegisterData\n                email={email}\n                password={password}\n                cnpj={cnpj}\n                confirmPassword={confirmPassword}\n                onChange={(event) => this.handleChangeFormRegisterData(event)}\n                onSubmit={(event) => this.handleSubmitFormRegisterData(event)}\n              />\n            )}\n\n            {displayFormSuccessData !== false && (\n              <FormSuccessData\n                displaySuccessMergeAccount={displaySuccessMergeAccount}\n                onClick={(event) => this.onClickButtonResendEmail(event)}\n                email={email}\n              />\n            )}\n            {errorMessage !== '' && <AlertsErrors message={errorMessage} />}\n\n            <a\n              href=\"/#\"\n              className=\"go-back\"\n              onClick={(event) => this.onClickButtonModal(event, false)}\n            >\n              Voltar\n            </a>\n          </ModalTemplate>\n        )}\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}