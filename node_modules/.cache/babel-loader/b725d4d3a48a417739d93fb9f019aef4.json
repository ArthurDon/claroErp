{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport { CRYPT_KEY, CRYPT_IV } from '../../constants';\n/**\n * Function Encrypto\n * @param {any} decrypted\n * @returns {string}\n */\n\nexport function enCrypto(decrypted) {\n  var message = '';\n\n  switch (typeof decrypted) {\n    case 'object':\n      message = JSON.stringify(decrypted);\n      break;\n\n    case 'string':\n      message = decrypted;\n      break;\n\n    default:\n      message = String(decrypted);\n  }\n\n  var keyHex = CryptoJS.enc.Utf8.parse(CRYPT_KEY);\n  var ivHex = CryptoJS.enc.Utf8.parse(CRYPT_IV);\n  var messageHex = CryptoJS.enc.Utf8.parse(message);\n  var encrypted = CryptoJS.AES.encrypt(messageHex, keyHex, {\n    iv: ivHex,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.toString();\n}\n/**\n * Function Decrypto\n * @param {string} encrypted\n * @returns {string}\n */\n\nexport function deCrypto(encrypted) {\n  var keyHex = CryptoJS.enc.Utf8.parse(CRYPT_KEY);\n  var ivHex = CryptoJS.enc.Utf8.parse(CRYPT_IV);\n  var decrypt = CryptoJS.AES.decrypt(encrypted, keyHex, {\n    iv: ivHex,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/frontend/claro-erp-frontend/src/utils/Crypt/index.js"],"names":["CryptoJS","CRYPT_KEY","CRYPT_IV","enCrypto","decrypted","message","JSON","stringify","String","keyHex","enc","Utf8","parse","ivHex","messageHex","encrypted","AES","encrypt","iv","mode","CBC","padding","pad","Pkcs7","toString","deCrypto","decrypt"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,iBAApC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAClC,MAAIC,OAAO,GAAG,EAAd;;AAEA,UAAQ,OAAOD,SAAf;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAV;AACA;;AACF,SAAK,QAAL;AACEC,MAAAA,OAAO,GAAGD,SAAV;AACA;;AACF;AACEC,MAAAA,OAAO,GAAGG,MAAM,CAACJ,SAAD,CAAhB;AARJ;;AAWA,MAAMK,MAAM,GAAGT,QAAQ,CAACU,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBX,SAAxB,CAAf;AACA,MAAMY,KAAK,GAAGb,QAAQ,CAACU,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBV,QAAxB,CAAd;AACA,MAAMY,UAAU,GAAGd,QAAQ,CAACU,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBP,OAAxB,CAAnB;AACA,MAAMU,SAAS,GAAGf,QAAQ,CAACgB,GAAT,CAAaC,OAAb,CAAqBH,UAArB,EAAiCL,MAAjC,EAAyC;AACzDS,IAAAA,EAAE,EAAEL,KADqD;AAEzDM,IAAAA,IAAI,EAAEnB,QAAQ,CAACmB,IAAT,CAAcC,GAFqC;AAGzDC,IAAAA,OAAO,EAAErB,QAAQ,CAACsB,GAAT,CAAaC;AAHmC,GAAzC,CAAlB;AAMA,SAAOR,SAAS,CAACS,QAAV,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBV,SAAlB,EAA6B;AAClC,MAAMN,MAAM,GAAGT,QAAQ,CAACU,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBX,SAAxB,CAAf;AACA,MAAMY,KAAK,GAAGb,QAAQ,CAACU,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBV,QAAxB,CAAd;AACA,MAAMwB,OAAO,GAAG1B,QAAQ,CAACgB,GAAT,CAAaU,OAAb,CAAqBX,SAArB,EAAgCN,MAAhC,EAAwC;AACtDS,IAAAA,EAAE,EAAEL,KADkD;AAEtDM,IAAAA,IAAI,EAAEnB,QAAQ,CAACmB,IAAT,CAAcC,GAFkC;AAGtDC,IAAAA,OAAO,EAAErB,QAAQ,CAACsB,GAAT,CAAaC;AAHgC,GAAxC,CAAhB;AAMA,SAAOjB,IAAI,CAACM,KAAL,CAAWc,OAAO,CAACF,QAAR,CAAiBxB,QAAQ,CAACU,GAAT,CAAaC,IAA9B,CAAX,CAAP;AACD","sourcesContent":["import CryptoJS from 'crypto-js';\n\nimport { CRYPT_KEY, CRYPT_IV } from '../../constants';\n\n/**\n * Function Encrypto\n * @param {any} decrypted\n * @returns {string}\n */\nexport function enCrypto(decrypted) {\n  let message = '';\n\n  switch (typeof decrypted) {\n    case 'object':\n      message = JSON.stringify(decrypted);\n      break;\n    case 'string':\n      message = decrypted;\n      break;\n    default:\n      message = String(decrypted);\n  }\n\n  const keyHex = CryptoJS.enc.Utf8.parse(CRYPT_KEY);\n  const ivHex = CryptoJS.enc.Utf8.parse(CRYPT_IV);\n  const messageHex = CryptoJS.enc.Utf8.parse(message);\n  const encrypted = CryptoJS.AES.encrypt(messageHex, keyHex, {\n    iv: ivHex,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  });\n\n  return encrypted.toString();\n}\n\n/**\n * Function Decrypto\n * @param {string} encrypted\n * @returns {string}\n */\nexport function deCrypto(encrypted) {\n  const keyHex = CryptoJS.enc.Utf8.parse(CRYPT_KEY);\n  const ivHex = CryptoJS.enc.Utf8.parse(CRYPT_IV);\n  const decrypt = CryptoJS.AES.decrypt(encrypted, keyHex, {\n    iv: ivHex,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  });\n\n  return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n"]},"metadata":{},"sourceType":"module"}